#!/usr/bin/env ruby

require "optparse"
require "net/http"
require "uri"
require "json"
require "yaml"
require "base64"

class JwError < StandardError
  def initialize(message, status = 1)
    super(message)
    @status = status
  end
end

class JwRcConfig
  def initialize(config)
    @config = config
  end

  def [](key)
    @config[key.to_sym] || @config[key.to_s]
  end

  def config_scope
    self[:config_scope] ||= "local"
  end

  def git_branch_prefix
    self[:git_branch_prefix] ||= "feature"
  end

  def method_missing(key, *args)
    self[key]
  end

  def self.load(config_file)
    config = YAML.load_file(File.expand_path(config_file))
    new(config)
  rescue Errno::ENOENT
    new({})
  end
end

class JwConfig
  def initialize(rc)
    @rc = rc
  end

  def get(key)
    value = `git config --get --#{@rc.config_scope} jw.#{key}`.strip
    value.empty? ? nil : value
  end

  def set(key, value)
    value.gsub!(/"/, '\\"')
    system("git config set --#{@rc.config_scope} jw.#{key} \"#{value}\"")
  end
end

class JiraHelper
  def self.get_issue(jira_key)
    uri = URI.parse("https://aurorasolar.atlassian.net/rest/api/3/issue/#{jira_key}")
    request = Net::HTTP::Get.new(uri)
    request["Accept"] = "application/json"
    request["Authorization"] = "Basic #{Base64.strict_encode64(ENV["JIRA_WORKFLOW_API_KEY"])}"
    request["Content-Type"] = "application/json"

    response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
      http.request(request)
    end

    unless response.is_a?(Net::HTTPSuccess)
      raise JwError.new("Error fetching Jira issue: #{response.code} #{response.message}")
    end

    JSON.parse(response.body)
  rescue JSON::ParserError => e
    raise JwError.new("Error parsing Jira response: #{e.message}")
  rescue StandardError => e
    raise JwError.new("Error accessing Jira: #{e.message}")
  end

  def self.transition_map(jira_key)
    uri = URI.parse("https://aurorasolar.atlassian.net/rest/api/3/issue/#{jira_key}/transitions")
    request = Net::HTTP::Get.new(uri)
    request["Accept"] = "application/json"
    request["Authorization"] = "Basic #{Base64.strict_encode64(ENV["JIRA_WORKFLOW_API_KEY"])}"
    request["Content-Type"] = "application/json"

    response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
      http.request(request)
    end

    unless response.is_a?(Net::HTTPSuccess)
      raise JwError.new("Error fetching Jira issue transitions: #{response.code} #{response.message}")
    end

    JSON.parse(response.body)["transitions"].to_h { |t| [t["name"], t["id"]] }
  rescue JSON::ParserError => e
    raise JwError.new("Error parsing Jira response: #{e.message}")
  rescue StandardError => e
    raise JwError.new("Error accessing Jira: #{e.message}")
  end

  def self.set_status(jira_key, status)
    uri = URI.parse("https://aurorasolar.atlassian.net/rest/api/3/issue/#{jira_key}/transitions")
    request = Net::HTTP::Post.new(uri)
    request["Accept"] = "application/json"
    request["Authorization"] = "Basic #{Base64.strict_encode64(ENV["JIRA_WORKFLOW_API_KEY"])}"
    request["Content-Type"] = "application/json"

    request.body = {
      transition: {
        id: transition_map(jira_key)[status],
      }
    }.to_json

    response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
      http.request(request)
    end

    unless response.is_a?(Net::HTTPSuccess)
      raise JwError.new("Error updating Jira issue status: #{response.code} #{response.message}")
    end
  rescue JSON::ParserError => e
    raise JwError.new("Error parsing Jira response: #{e.message}")
  rescue StandardError => e
    raise JwError.new("Error accessing Jira: #{e.message}")
  end

  def self.get_summary(issue)
    return issue["fields"]["summary"]
  end

  def self.get_status(issue)
    return issue["fields"]["status"]["name"]
  end
end

class GitHelper
  def initialize(rc, jw_config)
    @rc = rc
    @jw_config = jw_config
  end

  def create_branch(jira_key)
    new_branch = "#{@rc.git_branch_prefix}/#{jira_key}"
    # Check if the branch already exists
    if `git branch --list #{new_branch}`.strip.empty?
      system("git stash && git checkout #{default_branch} && git pull && git checkout -b #{new_branch} && git stash pop")
    else
      system("git stash && git checkout #{default_branch} && git pull && git checkout #{new_branch} && git rebase #{default_branch} && git stash pop")
    end
  end

  def default_branch
    branch = @jw_config.get("default-branch")
    if branch.nil? || branch.empty?
      "main"
    else
      branch
    end
  end
end

class JiraWorkflow
  def initialize(argv = [])
    @rc = JwRcConfig.load("~/.jwrc.yml")
    @jw_config = JwConfig.new(@rc)
    @git_helper = GitHelper.new(@rc, @jw_config)

    @options = {}
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: jw [options]"
      opts.on("-h", "--help", "Show this help message") do
        puts opts
        exit(0)
      end

      opts.on("-i", "--init BRANCH", "Initialize jw with repo's default branch") do |branch|
        @options[:init] = branch
      end

      opts.on("--commit-msg-hook", "Set commit-msg git hook mode") do
        @options[:commit_msg] = true
      end

      opts.on("-s", "--update-commit-sha SHA", "Update commit SHA") do |sha|
        @options[:update_commit_sha] = sha
      end

      opts.on("-r", "--reset", "Reset jw config") do
        @options[:reset] = true
      end
    end

    begin
      opt_parser.parse!(argv)
    rescue OptionParser::InvalidOption => e
      puts e.message
      puts opt_parser.help
      exit(1)
    end
  end

  def set_init(branch)
    @jw_config.set("default-branch", branch)
  end

  def set_jira_workflow_configs(jira_str)
    unless m = jira_str.match(/\/?([A-Za-z]+-\d+)$/)
      raise JwError.new("Invalid Jira key")
    end
    jira_key = m[1].upcase

    jira_issue = JiraHelper.get_issue(jira_key)
    jira_summary = JiraHelper.get_summary(jira_issue)
    jira_status = JiraHelper.get_status(jira_issue)
    if jira_status != "In Progress"
      JiraHelper.set_status(jira_key, "In Progress")
    end
    @jw_config.set("key", jira_key)
    @jw_config.set("summary", jira_summary)
    display_jira_workflow_configs
    @git_helper.create_branch(jira_key.downcase)
  end

  def display_jira_workflow_configs
    key = @jw_config.get("key")
    summary = @jw_config.get("summary")
    if !key || !summary
      puts "No Jira Workflow configs found"
    else
      puts "Jira key:       #{key}"
      puts "Jira summary:   #{summary}"
      puts "Default branch: #{@git_helper.default_branch}"
    end
  end

  def set_commit_msg(argv)
    commit_msg_file = argv.first
    if commit_msg_file.nil?
      raise JwError.new("No commit message file provided")
    end

    if !File.exist?(commit_msg_file)
      raise JwError.new("Commit message file does not exist")
    end

    commit_msg = File.read(commit_msg_file)
    if commit_msg.empty?
      raise JwError.new("Commit message file is empty")
    end

    File.write(commit_msg_file, update_commit_msg(commit_msg))
    puts "Commit message updated"
  end

  def update_commit_msg(commit_msg)
    key = @jw_config.get("key")
    return commit_msg if !key

    commit_msg.gsub!(/\A\[[A-Za-z]+-\d+\]/, "") # remove the jira key from the commit message
    "[#{key}] #{commit_msg}" # add jw's jira key to the commit message
  end

  def update_commit_sha(sha)
    puts "sha: #{sha}"
    msg = `git log -1 --pretty=%B '#{sha}'`.strip
    puts "msg: #{update_commit_msg(msg)}"
    system("git commit --amend -m '#{update_commit_msg(msg)}' '#{sha}'")
  end

  def reset_config
    @jw_config.set("key", "")
    @jw_config.set("summary", "")
    @jw_config.set("default-branch", "")
    puts "Jira Workflow configs reset"
  end

  def run
    if @options[:init]
      set_init(@options[:init])
    elsif @options[:reset]
      reset_config
    elsif @options[:commit_msg]
      set_commit_msg(ARGV)
    elsif @options[:update_commit_sha]
      raise JwError.new("Not implemented")
      update_commit_sha(@options[:update_commit_sha])
    elsif ARGV.empty?
      display_jira_workflow_configs
    else
      set_jira_workflow_configs(ARGV[0])
    end
    0
  end
end

if __FILE__ == $0
  begin
    jw = JiraWorkflow.new(ARGV)
    exit(jw.run)
  rescue JwError => e
    puts e.message
    exit(e.status)
  end
end
